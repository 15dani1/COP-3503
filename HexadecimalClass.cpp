
#include "Sudoku.h"

int Sudoku::hexaSudoku(){

const int rows = 22;
const int columns = 23;

cout << "          This is Hexadecimal Sudoku! These are the numbers that you will use            " << endl;
cout << "          7,8,9,A,B,C,D,E,F                                                                " << endl;
cout << "" << end1;

  /*  string hexaSudoku1 [rows][columns] =
    {
            {" ", " ", " ", "A", "B", "C", " ", "D", "E", "F", " ", "G", "H", "I", " "},
            {" ", " ", "+", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "+"},
            {" ", "1", "|", "9", "1", " ", "|", "7", " ", " ", "|", " ", " ", " ", "|"},
            {" ", "2", "|", " ", "3", "2", "|", "6", " ", "9", "|", " ", "8", " ", "|"},
            {" ", "3", "|", " ", " ", "7", "|", " ", "8", " ", "|", "9", " ", " ", "|"},
            {" ", " ", "|", "-", "-", "-", "+", "-", "-", "-", "+", "-", "-", "-", "|"},
            {" ", "4", "|", " ", "8", "6", "|", " ", "3", " ", "|", "1", "7", " ", "|"},
            {" ", "5", "|", "3", " ", " ", "|", " ", " ", " ", "|", " ", " ", "6", "|"},
            {" ", "6", "|", " ", "5", "1", "|", " ", "2", " ", "|", "8", "4", " ", "|"},
            {" ", " ", "|", "-", "-", "-", "+", "-", "-", "-", "+", "-", "-", "-", "|"},
            {" ", "7", "|", " ", " ", "9", "|", " ", "5", " ", "|", "3", " ", " ", "|"},
            {" ", "8", "|", " ", "2", " ", "|", "3", " ", "1", "|", "4", "9", " ", "|"},
            {" ", "9", "|", " ", " ", " ", "|", " ", " ", "2", "|", " ", "6", "1", "|"},
            {" ", " ", "+", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "+"},
    };
*/
    string hexaSudokuSol [rows][columns] =
    {
            {" ", " ", " ", "A", "B", "C", "D", "-", "D", "E", "F", "G", "-", "H", "I", "J", "K", "-", "L", "M", "N", "O", " "},
            {" ", " ", "+", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "+"},
            {" ", "1", "|", "B", "7", "8", "5", "|", "E", "6","10", "A", "|", "4", "D", "2", "C", "|", "1", "3", "F", "9", "|"},
            {" ", "2", "|", "A", "F","10", "1", "|", "5", "9", "2", "8", "|", "B", "3", "E", "6", "|", "D", "C", "4", "7", "|"},
            {" ", "3", "|", "D", "4", "9", "2", "|", "C", "B", "3", "7", "|", "A","10", "1", "F", "|", "3", "8", "E", "6", "|"},
            {" ", "4", "|", "C", "3", "E", "6", "|", "D", "4", "F", "1", "|", "5", "7", "9", "8", "|", "C","10", "B", "A", "|"}
            {" ", " ", "|", "-", "-", "-", "-", "-", "-", "+", "-", "-", "-", "+", "-", "-", "-", "-", "-", "-", "-", "-", "|"},
            {" ", "5", "|", "7", "B", "C", "A", "|", "3","10", "4", "2", "|", "9", "F", "D", "1", "|", "8", "E", "6", "5", "|"},
            {" ", "6", "|", "3", "5", "6", "4", "|", "F", "E", "9", "D", "|","10", "8", "C", "7", "|", "B", "A", "1", "2", "|"},
            {" ", "7", "|", "E", "9", "1", "F", "|", "8", "A", "7", "C", "|", "2", "6", "B", "5", "|", "3", "4","10", "D", "|"},
            {" ", "8", "|","10", "2", "D", "8", "|", "B", "1", "6", "5", "|", "3", "A", "4", "E", "|", "C", "7", "9", "F", "|"}
            {" ", " ", "|", "-", "-", "-", "-", "-", "-", "+", "-", "-", "-", "+", "-", "-", "-", "-", "-", "-", "-", "-", "|"},
            {" ", "9", "|", "9", "6", "7","10", "|", "4", "3", "D", "F", "|", "1", "C", "8", "B", "|", "A", "2", "5", "E", "|"},
            {" ","10", "|", "4", "C", "A", "B", "|", "6", "8", "5", "E", "|", "F", "9","10", "2", "|", "7", "1", "D", "3", "|"},
            {" ","11", "|", "F", "8", "3", "D", "|", "2", "7", "1","10", "|", "6", "E", "5", "A", "|", "4", "9", "C", "B", "|"},
            {" ","12", "|", "5", "1", "2", "E", "|", "A", "C", "B", "9", "|", "7", "4", "3", "D", "|", "F", "6", "8","10", "|"}
            {" ", " ", "|", "-", "-", "-", "-", "-", "-", "+", "-", "-", "-", "+", "-", "-", "-", "-", "-", "-", "-", "-", "|"},
            {" ","13", "|", "6","10", "B", "C", "|", "7", "D", "A", "3", "|", "E", "1", "F", "4", "|", "9", "5", "2", "8", "|"},
            {" ","14", "|", "2", "A", "5", "3", "|", "9", "F", "8", "4", "|", "C", "B", "6","10", "|", "E", "D", "7", "1", "|"},
            {" ","15", "|", "8", "E", "F", "9", "|", "1", "5", "C", "6", "|", "D", "2", "7", "3", "|","10", "B", "A", "4", "|"},
            {" ","16", "|", "1", "D", "4", "7", "|","10", "2", "E", "B", "|", "8", "5", "A", "9", "|", "6", "F", "3", "C", "|"}
            {" ", " ", "+", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "+"},
    };

    string hexaSudoku [rows][columns] =
    {
            {" ", " ", " ", "A", "B", "C", "D", "-", "D", "E", "F", "G", "-", "H", "I", "J", "K", "-", "L", "M", "N", "O", " "},
            {" ", " ", "+", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "+"},
            {" ", "1", "|", " ", "7", " ", "5", "|", " ", " ", " ", " ", "|", " ", "D", " ", " ", "|", "1", " ", " ", " ", "|"},
            {" ", "2", "|", "A", "F","10", " ", "|", " ", " ", " ", " ", "|", " ", " ", "E", " ", "|", " ", " ", "4", "7", "|"},
            {" ", "3", "|", " ", " ", " ", " ", "|", "C", "B", "3", " ", "|", "A", " ", "1", " ", "|", " ", "8", " ", " ", "|"},
            {" ", "4", "|", " ", "3", " ", " ", "|", " ", " ", " ", "1", "|", " ", " ", "9", " ", "|", "C", " ", "B", " ", "|"}
            {" ", " ", "|", "-", "-", "-", "-", "-", "-", "+", "-", "-", "-", "+", "-", "-", "-", "-", "-", "-", "-", "-", "|"},
            {" ", "5", "|", "7", "B", " ", "A", "|", " ", " ", " ", "2", "|", "9", " ", " ", " ", "|", " ", "E", " ", "5", "|"},
            {" ", "6", "|", "3", " ", "6", " ", "|", " ", " ", "9", " ", "|", " ", "8", " ", "7", "|", " ", " ", "1", "2", "|"},
            {" ", "7", "|", " ", " ", " ", "F", "|", "8", "A", " ", "C", "|", " ", "6", "B", "5", "|", " ", " ", " ", " ", "|"},
            {" ", "8", "|", " ", "2", " ", " ", "|", " ", " ", " ", "5", "|", " ", "A", "4", " ", "|", "C", " ", "9", " ", "|"}
            {" ", " ", "|", "-", "-", "-", "-", "-", "-", "+", "-", "-", "-", "+", "-", "-", "-", "-", "-", "-", "-", "-", "|"},
            {" ", "9", "|", " ", "6", " ","10", "|", " ", "3", "D", " ", "|", "1", " ", " ", " ", "|", " ", " ", "5", " ", "|"},
            {" ","10", "|", " ", " ", " ", " ", "|", "6", "8", "5", " ", "|", "F", " ","10", "2", "|", "7", " ", " ", " ", "|"},
            {" ","11", "|", "F", "8", " ", " ", "|", "2", " ", "1", " ", "|", " ", "E", " ", " ", "|", " ", "9", " ", "B", "|"},
            {" ","12", "|", "5", " ", "2", " ", "|", " ", " ", " ", "9", "|", "7", " ", " ", " ", "|", "F", " ", "8","10", "|"}
            {" ", " ", "|", "-", "-", "-", "-", "-", "-", "+", "-", "-", "-", "+", "-", "-", "-", "-", "-", "-", "-", "-", "|"},
            {" ","13", "|", " ","10", " ", "C", "|", " ", "D", " ", " ", "|", "E", "1", " ", " ", "|", " ", " ", "2", " ", "|"},
            {" ","14", "|", " ", " ", " ", " ", "|", " ", "F", " ", "4", "|", " ", "B", "6","10", "|", " ", " ", " ", " ", "|"},
            {" ","15", "|", "8", "E", " ", " ", "|", " ", "5", " ", " ", "|", " ", " ", " ", " ", "|", " ", "B", "A", "4", "|"},
            {" ","16", "|", "1", " ", "4", " ", "|", " ", " ", "E", " ", "|", " ", " ", " ", " ", "|", "6", " ", "3", " ", "|"}
            {" ", " ", "+", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "+"},
    };


    for(int i=0; i < 22; i++){

        for(int j=0; j < 22; j++) {

          cout << hexaSudoku[i][j] << " ";
        }
        cout << endl;
    }

while(hexaSudoku != hexaSudokuSol){
cout << "Please Enter the Letter Position of the Grid in which you would like to fill a value: ";
char letterValue;
cin >> letterValue;

int myLetterVal = (int)letterValue;
//determines letter values from ascii table
if(myLetterVal == 65){
  myLetterVal = 3;
}
else if(myLetterVal == 66){
  myLetterVal = 4;
}
else if(myLetterVal == 67){
  myLetterVal = 5;
}
else if(myLetterVal == 68){
  myLetterVal = 7;
}
else if(myLetterVal == 69){
  myLetterVal = 8;
}
else if(myLetterVal == 70){
  myLetterVal = 9;
}
else if(myLetterVal == 71){
  myLetterVal = 11;
}
else if(myLetterVal == 72){
  myLetterVal = 12;
}
else if(myLetterVal == 73){
  myLetterVal = 13;
}
else if(myLetterVal == 74){
  myLetterVal = 14;
}
else if(myLetterVal == 75){
  myLetterVal = 15;
}
else if(myLetterVal == 76){
  myLetterVal = 16;
}
else if(myLetterVal == 77){
  myLetterVal = 17;
}
else if(myLetterVal == 78){
  myLetterVal = 18;
}
else if(myLetterVal == 79){
  myLetterVal = 19;
}
else {
  cout << "Error Invalid Letter" << endl;
}

cout << "";
cout << "Please Enter the Number Position of the Grid in which you would like to fill a value: ";
int numberValue;
cin >> numberValue;

if (numberValue >= 1 && numberValue <=4){

    numberValue = numberValue + 1;
}
else if(numberValue > 4 && numberValue <=8){
    numberValue = numberValue + 2;
}

else if(numberValue > 8 && numberValue <= 12){

  numberValue = numberValue + 3;
}

else if(numberValue > 12 && numberValue <= 16){

  numberValue = numberValue + 4;
}
else {
  cout << "Error Invalid Number" << endl;
}

cout << "";
cout << "Please Enter the Sudoku number in the desired position: ";
string sudokuValue;
cin >> sudokuValue;

cout << "" << endl;

hexaSudoku[numberValue][myLetterVal] = sudokuValue;

for(int i=0; i < 22; i++){

    for(int j=0; j < 23; j++) {

      cout << hexaSudoku[i][j] << " ";
    }
    cout << endl;
    }
    int counter=0;
for(int K=0; K < 22; K++){

    for(int X=0; X < 22; X++) {
      int t=0;


      if(hexaSudoku[K][X] == hexaSudokuSol[K][X]){
        counter++;
            return 0;
      }
      else{
        cout << "You lose";
        break;
      }
    }
    }
if (counter == 225){
  cout << "Congradulations, you have completed this Hexadecimal Sudoku Puzzle!" << endl;
   //cout<<hexaSudoku[K][X];
   cout<<"\n";
   cout<<"bbbb"<< hexaSudokuSol[6][6];
}

/*for(int i=0; i <= 15; i++){
    for(int j=0; j <= 15; j++){

      if(hexaSudoku[i][j] == hexaSudokuSol[i][j]){
          a = false;
          cout << "Congradulations, you have completed this Hexadecimal Sudoku Puzzle!" << endl;
      }
      else
        a = true;

    }
    */

}
}



int main(){

  Sudoku sudoku;
  sudoku.hexaSudoku1();
}
